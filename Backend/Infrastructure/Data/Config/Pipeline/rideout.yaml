trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerRegistryServiceConnection: 'rideout-rg' 
  imageRepository: 'rideouts'
  tag: '$(Build.BuildId)'
  dockerfilePathBackend: 'Backend/Dockerfile'  
  dockerfilePathFrontend: 'Client/RideoutUI/Dockerfile' 
  composeFile: 'Docker/docker-compose.yml'            

stages:
- stage: Build
  displayName: Build and push Docker images
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Docker@2
      displayName: Build and push Backend image
      inputs:
        command: buildAndPush
        repository: $(imageRepository)/backend
        dockerfile: $(dockerfilePathBackend)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: Build and push Frontend image
      inputs:
        command: buildAndPush
        repository: $(imageRepository)/frontend
        dockerfile: $(dockerfilePathFrontend)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: Deploy to environment
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'rideout-dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DockerCompose@0
            displayName: 'Deploy with Docker Compose'
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureSubscription: $(dockerRegistryServiceConnection)
              dockerComposeFile: $(composeFile)
              action: 'Run services'
              projectName: 'rideouts'
              additionalImageTags: '$(tag)'
              detached: true
              ports: '80:80'  # Example, adjust based on your service ports

          - script: |
              echo "Deployment completed!"
            displayName: 'Confirm Deployment'